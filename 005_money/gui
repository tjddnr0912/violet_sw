#!/bin/bash

# 빗썸 자동매매 봇 GUI 실행 스크립트 (개선된 버전)
# GUI 전용 실행파일

set -e

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

# 로고 및 헤더
show_logo() {
    echo -e "${BLUE}${BOLD}"
    echo "╔══════════════════════════════════════════════════════════════════╗"
    echo "║                   🤖 빗썸 자동매매 봇 GUI                        ║"
    echo "║                      Bithumb Trading Bot                         ║"
    echo "╚══════════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

show_help() {
    show_logo
    echo -e "${YELLOW}사용법:${NC}"
    echo "  ./gui                       # GUI 실행 (기본: ver1)"
    echo "  ./gui --version ver1        # Ver1으로 GUI 실행"
    echo "  ./gui --version ver2        # Ver2로 GUI 실행"
    echo "  ./gui -v ver1               # 버전 선택 (축약형)"
    echo "  ./gui --help                # 도움말 표시"
    echo "  ./gui --setup-only          # 환경 설정만 실행"
    echo "  ./gui --check               # 시스템 요구사항 확인"
    echo "  ./gui --force-install       # 패키지 강제 재설치"
    echo ""
    echo -e "${CYAN}버전 정보:${NC}"
    echo "  📊 ver1: Elite 8-Indicator Strategy"
    echo "      - 8개 기술 지표 (MA, RSI, BB, Volume, MACD, ATR, Stochastic, ADX)"
    echo "      - 가중치 기반 신호 조합"
    echo "      - 시장 상황 인식 (Trending/Ranging/Transitional)"
    echo ""
    echo "  📊 ver2: (구현 예정)"
    echo "      - 새로운 거래 전략"
    echo ""
    echo -e "${CYAN}주요 기능:${NC}"
    echo "  🎮 실시간 봇 제어 (시작/정지)"
    echo "  📊 실시간 거래 상태 모니터링"
    echo "  💰 수익/손실 대시보드"
    echo "  ⚙️ 드롭다운 설정 변경"
    echo "  📝 실시간 로그 스트림"
    echo ""
    echo -e "${YELLOW}시스템 요구사항:${NC}"
    echo "  • Python 3.7+"
    echo "  • tkinter (GUI 라이브러리)"
    echo "  • pandas, requests, schedule, numpy"
    echo ""
}

check_system_requirements() {
    echo -e "${CYAN}🔍 시스템 요구사항을 확인하고 있습니다...${NC}"

    local all_good=true

    # 1. 디렉토리 확인 (버전 기반 구조로 업데이트)
    if [[ ! -f "001_python_code/gui_app.py" ]] || [[ ! -f "001_python_code/ver1/trading_bot_v1.py" ]]; then
        echo -e "${RED}❌ 005_money 디렉토리에서 실행해주세요.${NC}"
        echo "   필요한 파일: 001_python_code/gui_app.py, 001_python_code/ver1/trading_bot_v1.py"
        all_good=false
    else
        echo -e "${GREEN}✅ 디렉토리 확인 완료${NC}"
    fi

    # 2. Python 확인
    if ! command -v python3 &> /dev/null; then
        echo -e "${RED}❌ Python3가 설치되지 않았습니다.${NC}"
        echo "   Python 3.7 이상을 설치해주세요."
        all_good=false
    else
        PYTHON_VERSION=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
        echo -e "${GREEN}✅ Python 버전: $PYTHON_VERSION${NC}"

        # Python 버전 확인
        if python3 -c "import sys; exit(0 if sys.version_info >= (3, 7) else 1)" 2>/dev/null; then
            echo -e "${GREEN}✅ Python 버전 호환성 확인${NC}"
        else
            echo -e "${RED}❌ Python 3.7 이상이 필요합니다${NC}"
            all_good=false
        fi
    fi

    # 3. tkinter 확인
    echo "tkinter 라이브러리를 확인하고 있습니다..."
    if python3 -c "import tkinter" 2>/dev/null; then
        echo -e "${GREEN}✅ tkinter가 설치되어 있습니다${NC}"
    else
        echo -e "${RED}❌ tkinter가 설치되지 않았습니다${NC}"
        echo ""
        echo -e "${YELLOW}운영체제별 설치 방법:${NC}"
        echo "  • Ubuntu/Debian: sudo apt-get install python3-tk"
        echo "  • CentOS/RHEL:   sudo yum install tkinter"
        echo "  • Fedora:        sudo dnf install python3-tkinter"
        echo "  • macOS:         brew install python-tk"
        echo "  • Windows:       기본 설치됨"
        all_good=false
    fi

    return $([ "$all_good" = true ] && echo 0 || echo 1)
}

setup_environment() {
    echo ""
    echo -e "${CYAN}📦 환경을 설정하고 있습니다...${NC}"

    # 가상환경 확인 및 생성
    if [[ ! -d ".venv" ]]; then
        echo "가상환경을 생성하고 있습니다..."
        python3 -m venv .venv
        echo -e "${GREEN}✅ 가상환경 생성 완료${NC}"
    else
        echo -e "${GREEN}✅ 가상환경이 이미 존재합니다${NC}"
    fi

    # 가상환경 활성화
    echo "가상환경을 활성화하고 있습니다..."
    source .venv/bin/activate
    echo -e "${GREEN}✅ 가상환경 활성화 완료${NC}"
}

install_dependencies() {
    echo ""
    echo -e "${CYAN}📦 의존성 패키지를 설치하고 있습니다...${NC}"

    # pip 업그레이드
    if [[ "$FORCE_INSTALL" == true ]]; then
        echo "pip을 업그레이드하고 있습니다..."
        pip install --upgrade pip --quiet
    fi

    # GUI 전용 패키지 목록
    local packages=("pandas" "requests" "schedule" "numpy")

    # requirements.txt가 있으면 우선 사용
    if [[ -f "requirements.txt" ]]; then
        if [[ "$FORCE_INSTALL" == true ]]; then
            pip install -r requirements.txt --force-reinstall --quiet
        else
            pip install -r requirements.txt --quiet
        fi
    else
        # 개별 패키지 설치
        for package in "${packages[@]}"; do
            echo "  설치 중: $package"
            if [[ "$FORCE_INSTALL" == true ]]; then
                pip install "$package" --force-reinstall --quiet
            else
                pip install "$package" --quiet 2>/dev/null || {
                    echo -e "${YELLOW}⚠️  $package 설치 중 오류 발생, 재시도...${NC}"
                    pip install "$package"
                }
            fi
        done
    fi

    echo -e "${GREEN}✅ 의존성 패키지 설치 완료${NC}"
}

verify_installation() {
    echo ""
    echo -e "${CYAN}🔍 설치를 검증하고 있습니다...${NC}"

    python3 -c "
import sys
try:
    import tkinter
    print('✅ tkinter 확인 완료')
except ImportError:
    print('❌ tkinter 가져오기 실패')
    sys.exit(1)

try:
    import pandas, requests, schedule, numpy
    print('✅ 필수 패키지 확인 완료')
except ImportError as e:
    print(f'❌ 패키지 오류: {e}')
    sys.exit(1)

# GUI 파일 확인 (버전 기반 구조로 업데이트)
import os
required_files = [
    '001_python_code/gui_app.py',
    '001_python_code/ver1/gui_trading_bot_v1.py',
    '001_python_code/ver1/trading_bot_v1.py',
    '001_python_code/config.py'
]
missing = [f for f in required_files if not os.path.exists(f)]
if missing:
    print(f'❌ 누락된 파일: {missing}')
    sys.exit(1)
else:
    print('✅ 필수 파일 확인 완료')

print('✅ 모든 요구사항이 충족되었습니다!')
"

    if [[ $? -eq 0 ]]; then
        echo -e "${GREEN}✅ 설치 검증 완료${NC}"
        return 0
    else
        echo -e "${RED}❌ 설치 검증 실패${NC}"
        return 1
    fi
}

show_gui_info() {
    echo ""
    echo "╔══════════════════════════════════════════════════════════════════╗"
    echo -e "║                     ${BOLD}🎮 GUI 기능 안내${NC}                        ║"
    echo "╠══════════════════════════════════════════════════════════════════╣"
    echo -e "║ ${CYAN}🎮 실시간 제어${NC}                                              ║"
    echo "║   • 원클릭 봇 시작/정지                                           ║"
    echo "║   • 실시간 설정 변경 (재시작 없이)                                ║"
    echo "║   • 안전한 종료 및 상태 저장                                      ║"
    echo "║                                                                  ║"
    echo -e "║ ${CYAN}📊 실시간 모니터링${NC}                                           ║"
    echo "║   • 현재 거래 코인 및 실시간 가격 표시                            ║"
    echo "║   • 평균 매수가 및 보유 수량 현황                                 ║"
    echo "║   • 체결 대기 주문 상태                                           ║"
    echo "║   • 실시간 로그 스트림                                            ║"
    echo "║                                                                  ║"
    echo -e "║ ${CYAN}💰 수익 대시보드${NC}                                             ║"
    echo "║   • 일일/총 수익 실시간 계산                                      ║"
    echo "║   • 거래 횟수 및 성공률 통계                                      ║"
    echo "║   • 최근 거래 내역 차트                                           ║"
    echo "║   • 평가손익 실시간 업데이트                                      ║"
    echo "║                                                                  ║"
    echo -e "║ ${CYAN}⚙️ 드롭다운 설정${NC}                                              ║"
    echo "║   • 거래 코인 선택: BTC, ETH, XRP, ADA, DOT, LINK 등             ║"
    echo "║   • 체크 간격 변경: 10초 ~ 4시간 (10s, 30s, 1m, 5m...)           ║"
    echo "║   • 거래 금액 조정: 실시간 입력                                   ║"
    echo "║   • 즉시 적용: 봇 재시작 없이 설정 변경                          ║"
    echo "╚══════════════════════════════════════════════════════════════════╝"
    echo ""
    echo -e "${YELLOW}⚠️  주의사항:${NC}"
    echo "  • 기본적으로 모의 거래 모드로 실행됩니다"
    echo "  • 실제 거래 모드 사용 시 자금 손실 위험이 있습니다"
    echo "  • GUI에서 Ctrl+C를 눌러 안전하게 종료할 수 있습니다"
    echo ""
}

launch_gui() {
    echo -e "${BLUE}🚀 GUI를 시작합니다...${NC}"

    # 버전 정보 표시
    if [[ -n "$VERSION" ]]; then
        echo -e "${CYAN}📊 선택된 버전: $VERSION${NC}"
    else
        echo -e "${CYAN}📊 선택된 버전: ver1 (기본)${NC}"
    fi
    echo ""

    # 가상환경이 있으면 활성화
    if [[ -d ".venv" ]]; then
        source .venv/bin/activate
    fi

    # GUI 실행 (버전 인수 전달)
    echo "GUI 애플리케이션을 실행하고 있습니다..."
    if [[ -n "$VERSION" ]]; then
        python3 run_gui.py --version "$VERSION"
    else
        python3 run_gui.py
    fi
}

# 인수 파싱
SETUP_ONLY=false
CHECK_ONLY=false
FORCE_INSTALL=false
SHOW_HELP=false
VERSION=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --version|-v)
            VERSION="$2"
            shift 2
            ;;
        --setup-only)
            SETUP_ONLY=true
            shift
            ;;
        --check)
            CHECK_ONLY=true
            shift
            ;;
        --force-install)
            FORCE_INSTALL=true
            shift
            ;;
        --help|-h)
            SHOW_HELP=true
            shift
            ;;
        *)
            echo -e "${RED}❌ 알 수 없는 옵션: $1${NC}"
            echo "사용법: ./gui [--version ver1|ver2] [--setup-only|--check|--force-install|--help]"
            exit 1
            ;;
    esac
done

# 메인 실행 로직
main() {
    # 도움말 표시
    if [[ "$SHOW_HELP" == true ]]; then
        show_help
        exit 0
    fi

    show_logo

    # 시스템 요구사항 확인만
    if [[ "$CHECK_ONLY" == true ]]; then
        check_system_requirements
        exit $?
    fi

    # 1. 시스템 요구사항 확인
    if ! check_system_requirements; then
        echo ""
        echo -e "${RED}❌ 시스템 요구사항을 충족하지 않습니다.${NC}"
        echo "위의 안내에 따라 필요한 패키지를 설치해주세요."
        exit 1
    fi

    # 2. 환경 설정
    setup_environment

    # 3. 의존성 설치
    install_dependencies

    # 4. 설치 검증
    if ! verify_installation; then
        echo ""
        echo -e "${RED}❌ 설치 검증에 실패했습니다.${NC}"
        echo "run.py --force-install을 실행하거나 수동으로 패키지를 설치해주세요."
        exit 1
    fi

    # 설정만 하고 종료
    if [[ "$SETUP_ONLY" == true ]]; then
        echo ""
        echo -e "${GREEN}✅ 환경 설정이 완료되었습니다.${NC}"
        echo "GUI를 실행하려면: ./gui"
        exit 0
    fi

    # 5. GUI 정보 표시
    show_gui_info

    # 6. 사용자 확인
    echo -e "${BOLD}GUI를 시작하시겠습니까?${NC}"
    read -p "계속 진행하시겠습니까? [Y/n]: " -n 1 -r
    echo ""

    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo "GUI 실행을 취소했습니다."
        exit 0
    fi

    # 7. GUI 실행
    launch_gui
}

# 스크립트 실행
main

# 실행 권한 확인 알림
if [[ ! -x "$0" ]]; then
    echo ""
    echo -e "${YELLOW}💡 팁: 다음 명령으로 실행 권한을 부여할 수 있습니다:${NC}"
    echo "chmod +x gui"
fi